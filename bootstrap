#!/usr/bin/env sh
#
# NAME
#    bootstrap -- initialize/update docker environment

# vim: set ts=2 sts=2 sw=2 et:
set -e

# Common constants
COLOR_RESET='\033[0m'
COLOR_GREEN='\033[0;32m'
TEST_HOST="${TEST_HOST:-127.0.0.1}"

echo "Integration test host: ${TEST_HOST}"

get_container() {
  docker compose ps -q $1
}

get_exposed_port() {
  docker compose port $1 $2 | cut -d: -f2
}

report_start() {
  printf "Waiting for $1 ... "
}

report_done() {
  printf "${COLOR_GREEN}done${COLOR_RESET}\n"
}

wait_for_healthy_containers() {
  report_start "${1} containers to report healthy"
  counter="0"
  while true
  do
    if [ "$( docker compose ps | grep -c healthy | grep -v unhealthy)" -eq "${1}" ]; then
      break
    fi
    counter=$((counter+1))
    if [ "${counter}" -eq 60 ]; then
      echo " ERROR: containers failed to start"
      exit 1
    fi
    sleep 1
  done
  report_done
}

mkdir -p build ddl/build imbi/static/css imbi/static/fonts imbi/static/js

# Stop any running instances and clean up after them, then pull images
docker compose down --volumes --remove-orphans
printf "Pulling and starting containers ... "
docker compose pull -q
docker compose up -d ldap opensearch postgres redis
report_done

wait_for_healthy_containers 4

cat > .env <<EOF
export ENVIRONMENT=development
export LDAP_ENABLED=true
export LDAP_HOST=${TEST_HOST}
export LDAP_PORT=$(get_exposed_port ldap 389)
export LDAP_SSL=False
export LDAP_GROUPS_DN=ou=groups,dc=example,dc=org
export LDAP_USERS_DN=ou=users,dc=example,dc=org
export LDAP_USERNAME=cn
export LDAP_POOLSIZE=5
export OPENSEARCH_HOST=${TEST_HOST}
export OPENSEARCH_PORT=$(get_exposed_port opensearch 9200)
export SESSION_REDIS_URL=redis://${TEST_HOST}:$(get_exposed_port redis 6379)/0
export STATS_REDIS_URL=redis://${TEST_HOST}:$(get_exposed_port redis 6379)/1
export POSTGRES_URL=postgres://postgres@${TEST_HOST}:$(get_exposed_port postgres 5432)/postgres
EOF

cat > build/debug.yaml <<EOF
---
actions:
  github_deployment:
    enabled: true
automations:
  github:
    project_link_type_id: ~
  grafana:
    project_link_type_id: ~
  sentry:
    project_link_type_id: ~
  sonarqube:
    admin_token: ~
    project_link_type_id: ~
    url: ~
component_scoring:
  enabled: true
google:
  enabled: true
  valid_domains: gmail.com
  integration_name: google
http:
  canonical_server_name: imbi.localhost
  processes: 1
javascript_url: http://localhost:8080/static/
ldap:
  enabled: true
  host: ${TEST_HOST}
  port: $(get_exposed_port ldap 389)
  ssl: false
  groups_dn: ou=groups,dc=example,dc=org
  users_dn: ou=users,dc=example,dc=org
  username: cn
  pool_size: 5
local_users:
  enabled: true
opensearch:
  connection:
    hosts:
      - host: ${TEST_HOST}
        port: $(get_exposed_port opensearch 9200)
    use_ssl: false
  redis_url: redis://${TEST_HOST}:$(get_exposed_port redis 6379)/2
postgres:
  url: postgres://postgres@${TEST_HOST}:$(get_exposed_port postgres 5432)/imbi
project_configuration:
  ssm_prefix_template: /{namespace_slug}/{project_type_slug}/{project_slug}/
project_url_template: http://{slug}.service.{environment}.consul
ops_log_ticket_slug_template: "https://github.com/AWeber-Imbi/Imbi/issues/{slug}"
session:
  redis_url: redis://${TEST_HOST}:$(get_exposed_port redis 6379)/0
stats:
  redis_url: redis://${TEST_HOST}:$(get_exposed_port redis 6379)/1
logging:
  version: 1
  formatters:
    verbose:
      format: "%(levelname) -10s %(asctime)s %(name) -15s %(funcName) -15s: %(message)s"
  handlers:
    console:
      class: logging.StreamHandler
      formatter: verbose
  loggers:
    imbi:
      level: DEBUG
    imbi.ldap:
      level: WARNING
    imbi.session:
      level: WARNING
    imbi.user:
      level: WARNING
    sprockets_postgres:
      level: DEBUG
    tornado:
      level: DEBUG
  root:
    level: INFO
    handlers: [console]
  disable_existing_loggers: false
  incremental: false
EOF

cat > build/test.yaml <<EOF
---
http:
  canonical_server_name: imbi.example.org
ldap:
  enabled: true
  host: ${TEST_HOST}
  port: $(get_exposed_port ldap 389)
  ssl: false
  groups_dn: ou=groups,dc=example,dc=org
  users_dn: ou=users,dc=example,dc=org
  username: cn
  pool_size: 5
opensearch:
  connection:
    hosts:
      - host: ${TEST_HOST}
        port: $(get_exposed_port opensearch 9200)
    use_ssl: false
  redis_url: redis://${TEST_HOST}:$(get_exposed_port redis 6379)/2
postgres:
  url: postgres://postgres@${TEST_HOST}:$(get_exposed_port postgres 5432)/postgres
project_url_template: ~
session:
  redis_url: redis://${TEST_HOST}:$(get_exposed_port redis 6379)/0
stats:
  redis_url: redis://${TEST_HOST}:$(get_exposed_port redis 6379)/1
logging:
  version: 1
  formatters:
    verbose:
      format: "%(levelname) -10s %(asctime)s %(name) -15s %(funcName) -15s: %(message)s"
  handlers:
    console:
      class: logging.StreamHandler
      formatter: verbose
  loggers: {}
  root:
    level: CRITICAL
    handlers: [console]
  disable_existing_loggers: true
  incremental: false
EOF

printf "\nBootstrap complete\n\n"
