from __future__ import annotations

import enum
import re

import pydantic
import typing_extensions as typing

from imbi import errors
from imbi.endpoints import base


class ComponentStatus(str, enum.Enum):
    ACTIVE = 'Active'
    DEPRECATED = 'Deprecated'
    FORBIDDEN = 'Forbidden'


class Component(pydantic.BaseModel):
    package_url: str = pydantic.constr(pattern=r'^pkg:')
    name: str
    status: ComponentStatus
    icon_class: str
    active_version: typing.Union[str, None]
    home_page: typing.Union[str, None]


class ComponentToken(base.PaginationToken):
    """Pagination token that includes the starting package URL"""
    def __init__(self, *, starting_package: str = '', **kwargs) -> None:
        super().__init__(starting_package=starting_package, **kwargs)

    def with_first(self, value: dict[str, object]) -> typing.Self:
        kwargs = self.as_dict(starting_package=value['package_url'])
        return ComponentToken(**kwargs)


class CollectionRequestHandler(base.PaginatedCollectionHandler):
    NAME = 'components'
    ITEM_NAME = 'component'
    ID_KEY = 'package_url'
    FIELDS = [
        'package_url', 'name', 'status', 'home_page', 'icon_class',
        'active_version'
    ]
    DEFAULTS = {
        'status': 'Active',
        'icon_class': 'fas fa-save',
        'active_version': None
    }

    COLLECTION_SQL = re.sub(
        r'\s+', ' ', """\
        SELECT package_url, "name", status, home_page, icon_class,
               active_version, created_at, created_by,
               last_modified_at, last_modified_by
          FROM v1.components
         WHERE package_url > %(starting_package)s
         ORDER BY package_url ASC
         LIMIT %(limit)s
        """)
    GET_SQL = re.sub(
        r'\s+', ' ', """\
        SELECT package_url, "name", status, home_page, icon_class,
               active_version, created_at, created_by,
               last_modified_at, last_modified_by
          FROM v1.components
         WHERE package_url = %(package_url)s
        """)
    POST_SQL = re.sub(
        r'\s+', ' ', """\
        INSERT INTO v1.components
                    (package_url, "name", status, home_page,
                     active_version, icon_class, created_by)
             VALUES (%(package_url)s, %(name)s, %(status)s, %(home_page)s,
                     %(active_version)s, %(icon_class)s, %(username)s)
          RETURNING *
        """)

    def get_pagination_token_from_request(self) -> ComponentToken:
        return ComponentToken.from_request(self.request)

    @base.require_permission('admin')
    async def post(self, *args, **kwargs) -> None:
        await super().post(*args, **kwargs)


class RecordRequestHandler(base.CRUDRequestHandler):
    NAME = 'component'
    ID_KEY = 'package_url'
    GET_SQL = re.sub(
        r'\s+', ' ', """\
        SELECT package_url, "name", status, home_page, icon_class,
               active_version, created_at, created_by,
               last_modified_at, last_modified_by
          FROM v1.components
         WHERE package_url = %(package_url)s
        """)
    DELETE_SQL = re.sub(
        r'\s+', ' ', """\
        DELETE FROM v1.components WHERE package_url = %(package_url)s
        """)
    PATCH_SQL = re.sub(
        r'\s+', ' ', """\
        UPDATE v1.components
           SET package_url = %(package_url)s,
               "name" = %(name)s,
               status = %(status)s,
               home_page = %(home_page)s,
               icon_class = %(icon_class)s,
               active_version = %(active_version)s,
               last_modified_at = CURRENT_TIMESTAMP,
               last_modified_by = %(username)s
         WHERE package_url = %(current_package_url)s
        """)

    @base.require_permission('admin')
    async def delete(self, *args, **kwargs):
        await super().delete(*args, **kwargs)

    @base.require_permission('admin')
    async def patch(self, *args, **kwargs):
        await super().patch(*args, **kwargs)

    def _check_validity(self, instance: dict[str, typing.Any]) -> bool:
        try:
            Component.model_validate(instance)
        except pydantic.ValidationError as error:
            raise errors.BadRequest(
                'failed to validate patched version: %s',
                error,
                title='Invalid instance generated by update',
                validation_errors=error.errors()) from None
        else:
            return True
